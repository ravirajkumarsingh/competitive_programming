Selection Sort:                


                                Best Case             Average Case         Worst Case 
*  Time Complexity :    O(n^2)                        O(n^2)                 O(n^2)        
* Space Complexity :  O(1)


* The good thing about selection sort is it never makes more than O(n) swaps and can be useful when memory write is a costly operation. 


* As there are 2 loops 


EXAMPLES :


arr[] = 64 25 12 22 11


// Find the minimum element in arr[0...4]
// and place it at beginning
11 25 12 22 64


// Find the minimum element in arr[1...4]
// and place it at beginning of arr[1...4]
11 12 25 22 64


// Find the minimum element in arr[2...4]
// and place it at beginning of arr[2...4]
11 12 22 25 64


// Find the minimum element in arr[3...4]
// and place it at beginning of arr[3...4]
11 12 22 25 64


CODE IMPLEMENTATIONS:


class Solution {
    int selection_sort(int arr[]) {
        int n = arr.length;
        for(int i=0;i<n-1;i++) {
            int min_idx = i;
            for(int j=1;j<n-1;j++){
                if(arr[j]<arr[min_idx]){
                    min_idx = j;
                }
                int temp = arr[min_idx];
                arr[min_idx] = arr[i];
                arr[i] = temp;    
            }
        }
    }
    
    void print(int arr[]) {
        for(int i=0;i<arr.length-1;i++){
         system.out.println(arr[i]+" ");   
        }
    }
    
    public static void main(String args[]) {
        Solution sol = new Solution();
        int arr[] = {11,45,12,98,1};
        sol.selection_sort(arr);
        System.out.println("Sorted Array");
        sol.print(arr);
    }
}