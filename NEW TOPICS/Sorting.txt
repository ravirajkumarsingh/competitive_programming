Selection Sort:                


                                Best Case             Average Case         Worst Case 
*  Time Complexity :    O(n^2)                        O(n^2)                 O(n^2)        
* Space Complexity :  O(1)


* The good thing about selection sort is it never makes more than O(n) swaps and can be useful when memory write is a costly operation. 


* As there are 2 loops 


EXAMPLES :


arr[] = 64 25 12 22 11


// Find the minimum element in arr[0...4]
// and place it at beginning
11 25 12 22 64


// Find the minimum element in arr[1...4]
// and place it at beginning of arr[1...4]
11 12 25 22 64


// Find the minimum element in arr[2...4]
// and place it at beginning of arr[2...4]
11 12 22 25 64


// Find the minimum element in arr[3...4]
// and place it at beginning of arr[3...4]
11 12 22 25 64


CODE IMPLEMENTATIONS:


class Solution {
    int selection_sort(int arr[]) {
        int n = arr.length;
        for(int i=0;i<n-1;i++) {
            int min_idx = i;
            for(int j=1;j<n-1;j++){
                if(arr[j]<arr[min_idx]){
                    min_idx = j;
                }
                int temp = arr[min_idx];
                arr[min_idx] = arr[i];
                arr[i] = temp;    
            }
        }
    }
    
    void print(int arr[]) {
        for(int i=0;i<arr.length-1;i++){
         system.out.println(arr[i]+" ");   
        }
    }
    
    public static void main(String args[]) {
        Solution sol = new Solution();
        int arr[] = {11,45,12,98,1};
        sol.selection_sort(arr);
        System.out.println("Sorted Array");
        sol.print(arr);
    }
}


Bubble Sort:	Best Case 		Average Case 		Worst Case

Time Complexity  	O(n)			O(n^2)					O(n^2)



Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order.
Example: 
First Pass: 
( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, the algorithm compares the first two elements and swaps since 5 > 1. 
( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4 
( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2 
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), the algorithm does not swap them.
Second Pass: 
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ) 
( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2 
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 ) 
( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 ) 
Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
Third Pass: 
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 ) 
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 ) 
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 ) 
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )


Code Implementation: 

import java.util.*;
import java.io.*;

class Solution {
    static void bubble_sort(int arr[]) {
        int n = arr.length;
        for(int i=0;i<n-1;i++) {
            for(int j=0;j<n-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
    
    void print(int arr[]) {
        for(int i=0;i<arr.length;i++){
         System.out.print(arr[i]+" ");   
        }
    }
    
    public static void main(String args[]) {
        Solution sol = new Solution();
        int arr[] = {11,25,12,34,22,90,64};
        sol.bubble_sort(arr);
        System.out.println("Sorted Array:");
        sol.print(arr);
    }
}


Optimized Implementation: 
The above function always runs O(n^2) time even if the array is sorted. It can be optimized by stopping the algorithm if the inner loop didn’t cause any swap. 

CODE IMPLEMENTATION FOR OPTIMIZATION :

import java.util.*;
import java.io.*;

class Solution {
    static void bubble_sort(int arr[]) {
        boolean swapped = false;
        int n = arr.length;
        for(int i=0;i<n-1;i++) {
            for(int j=0;j<n-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    swapped = true;
                }
            }
            if(swapped == false)
                break;
        }
    }
    
    void print(int arr[]) {
        for(int i=0;i<arr.length;i++){
         System.out.print(arr[i]+" ");   
        }
    }
    
    public static void main(String args[]) {
        Solution sol = new Solution();
        int arr[] = {11,25,12,34,22,90,64};
        sol.bubble_sort(arr);
        System.out.println("Sorted Array:");
        sol.print(arr);
    }
}
Worst and Average Case Time Complexity: O(n*n). The worst case occurs when the array is reverse sorted.
Best Case Time Complexity: O(n). The best-case occurs when the array is already sorted.
Auxiliary Space: O(1)
Boundary Cases: Bubble sort takes minimum time (Order of n) when elements are already sorted.
Sorting In Place: Yes
Stable: Yes
Due to its simplicity, bubble sort is often used to introduce the concept of a sorting algorithm. 
In computer graphics, it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to the x-axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines
