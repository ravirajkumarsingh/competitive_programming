Java String compareTo()
The Java String class compareTo() method compares the given string with the current string lexicographically. It returns a positive number, negative number, or 0.
It compares strings on the basis of the Unicode value of each character in the strings.
If the first string is lexicographically greater than the second string, it returns a positive number (difference of character value). If the first string is less than the second string lexicographically, it returns a negative number, and if the first string is lexicographically equal to the second string, it returns 0.
1. if s1 > s2, it returns positive number  
2. if s1 < s2, it returns negative number  
3. if s1 == s2, it returns 0  
Syntax
1. public int compareTo(String anotherString)    
The method accepts a parameter of type String that is to be compared with the current string.5M00Exception Handling in Java - Javatpoint
It returns an integer value. It throws the following two exceptions:
ClassCastException: If this object cannot get compared with the specified object.
NullPointerException: If the specified object is null.
Internal implementation
int compareTo(String anotherString) {  
    int length1 = value.length;  
    int length2 = anotherString.value.length;  
    int limit = Math.min(length1, length2);  
    char v1[] = value;  
    char v2[] = anotherString.value;  
   
    int i = 0;  
    while (i < limit) {  
        char ch1 = v1[i];  
        char ch2 = v2[i];  
        if (ch1 != ch2) {  
            return ch1 - ch2;  
        }  
        i++;  
    }  
    return length1 - length2;  
}  
Java String compareTo() Method Example
FileName: CompareToExample.java
public class CompareToExample{  
public static void main(String args[]){  
String s1="hello";  
String s2="hello";  
String s3="meklo";  
String s4="hemlo";  
String s5="flag";  
System.out.println(s1.compareTo(s2));//0 because both are equal  
System.out.println(s1.compareTo(s3));//-5 because "h" is 5 times lower than "m"  
System.out.println(s1.compareTo(s4));//-1 because "l" is 1 times lower than "m"  
System.out.println(s1.compareTo(s5));//2 because "h" is 2 times greater than "f"  
}}  
Output:
0
-5
-1
2


Collections:


A Collection represents a single unit of objects, i.e., a group.
The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.
Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).


  







Java String
In Java, string is basically an object that represents sequence of char values. An array of characters works the same as Java string. For example:
1. char[] ch={'j','a','v','a','t','p','o','i','n','t'};  
2. String s=new String(ch);  
is same as:
1. String s="javatpoint";  
Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.
The java.lang.String class implements Serializable, Comparable and CharSequence interfaces.
29.7M
689
OOPs Concepts in Java
Next
Stay
 String in Java 

CharSequence Interface
The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes.
 CharSequence in Java 

The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes.
We will discuss immutable strings later. Let's first understand what String in Java is and how to create the String object.
What is String in Java?
Generally, a String is a sequence of characters. But in Java, the string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object.
How to create a string object?
There are two ways to create a String object:
1. By string literal
2. By new keyword
1) String Literal
Java String literal is created by using double-quotes. For Example
1. String s="welcome";  
Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example
1. String s1="Welcome";  
2. String s2="Welcome";//It doesn't create a new instance  


 Java String 

In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in the string constant pool which is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance.
Note: String objects are stored in a special memory area known as the "string constant pool".
Why does Java use the concept of String literal?
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).
2) By new keyword
1. String s=new String("Welcome");//creates two objects and one reference variable  
In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).
Java String Example
StringExample.java
1. public class StringExample{    
2. public static void main(String args[]){    
3. String s1="java";//creating string by Java string literal    
4. char ch[]={'s','t','r','i','n','g','s'};    
5. String s2=new String(ch);//converting char array to string    
6. String s3=new String("example");//creating Java string by new keyword    
7. System.out.println(s1);    
8. System.out.println(s2);    
9. System.out.println(s3);    
10. }}    
Test it Now
Output:
java
strings
example
The above code converts a char array into a String object. And displays the String objects s1, s2, and s3 on the console using println() method.
Java String class methods
The java.lang.String class provides many useful methods to perform operations on a sequence of char values.
No.
	Method
	Description
	1
	char charAt(int index)
	It returns char value for the particular index
	2
	int length()
	It returns string length
	3
	static String format(String format, Object... args)
	It returns a formatted string.
	4
	static String format(Locale l, String format, Object... args)
	It returns formatted string with given locale.
	5
	String substring(int beginIndex)
	It returns substring for given begin index.
	6
	String substring(int beginIndex, int endIndex)
	It returns substring for given begin index and end index.
	7
	boolean contains(CharSequence s)
	It returns true or false after matching the sequence of char value.
	8
	static String join(CharSequence delimiter, CharSequence... elements)
	It returns a joined string.
	9
	static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)
	It returns a joined string.
	10
	boolean equals(Object another)
	It checks the equality of string with the given object.
	11
	boolean isEmpty()
	It checks if string is empty.
	12
	String concat(String str)
	It concatenates the specified string.
	13
	String replace(char old, char new)
	It replaces all occurrences of the specified char value.
	14
	String replace(CharSequence old, CharSequence new)
	It replaces all occurrences of the specified CharSequence.
	15
	static String equalsIgnoreCase(String another)
	It compares another string. It doesn't check case.
	16
	String[] split(String regex)
	It returns a split string matching regex.
	17
	String[] split(String regex, int limit)
	It returns a split string matching regex and limit.
	18
	String intern()
	It returns an interned string.
	19
	int indexOf(int ch)
	It returns the specified char value index.
	20
	int indexOf(int ch, int fromIndex)
	It returns the specified char value index starting with given index.
	21
	int indexOf(String substring)
	It returns the specified substring index.
	22
	int indexOf(String substring, int fromIndex)
	It returns the specified substring index starting with given index.
	23
	String toLowerCase()
	It returns a string in lowercase.
	24
	String toLowerCase(Locale l)
	It returns a string in lowercase using specified locale.
	25
	String toUpperCase()
	It returns a string in uppercase.
	26
	String toUpperCase(Locale l)
	It returns a string in uppercase using specified locale.
	27
	String trim()
	It removes beginning and ending spaces of this string.
	28
	static String valueOf(int value)
	It converts given type into string. It is an overloaded method.
	

Do You Know?
* Why are String objects immutable?
* How to create an immutable class?
* What is string constant pool?
* What code is written by the compiler if you concatenate any string by + (string concatenation operator)?
* What is the difference between StringBuffer and StringBuilder class?


What will we learn in String Handling?
* Concept of String
* Immutable String
* String Comparison
* String Concatenation
* Concept of Substring
* String class methods and its usage
* StringBuffer class
* StringBuilder class
* Creating Immutable class
* toString() method
* StringTokenizer class